-- Functii recursive.

-- Transparenta referentiala.
-- Doua bucati de cod identice = produc acelasi rezultat, indiferent de contextul in care sunt evaluate.

-- Nu pot face atribui valori unor variabile globale.
-- Nu exista bucla for/while.
-- in mod echivalent:
-- Functii recursive.

-- Signatura
fibo :: Integer -> Integer
-- Ecuatii
fibo 0 = 1
fibo 1 = 1
fibo n = fibo (n - 1) + fibo (n - 2)

-- fibo 3 =
--            ( Ecuatia 3 )
-- fibo 2 + fibo 1 =
--            ( Ecuatia 3 )
-- (fibo 1 + fibo 0) + fibo 1  =
--            ( Ecuatia 2 )
-- (1 + fibo 0) + fibo 1  =
--            ( Ecuatia 1 )
-- (1 + 1) + fibo 1  =
--            ( Matematica )
-- 2 + fibo 1 = 
--            ( Ecuatia 2 )
-- 2 + 1  =
--            ( Matematica )
-- 3.


-- Ecuatii constranse de garzi

fibo' :: Integer -> Integer
fibo' x | x == 0 || x == 1 = 1       
fibo' n                    = fibo' (n - 1) + fibo' (n - 2)


fibo'' :: Integer -> Integer
fibo'' x | x == 0 = 1
fibo'' x | x == 1 = 1       
fibo'' n          = fibo'' (n - 1) + fibo'' (n - 2)

-- Syntactic sugar

fibo''' :: Integer -> Integer
fibo''' x | x == 0 = 1
          | x == 1 = 1       
fibo''' n          = fibo''' (n - 1) + fibo''' (n - 2)


fibo'''' :: Integer -> Integer
fibo'''' x | x == 0 = 1
           | x == 1 = 1       
           | otherwise = fibo'''' (x - 1) + fibo'''' (x - 2)


fibo5 :: Integer -> Integer
fibo5 n = if n == 0 then 1
          else if n == 1 then 1
          else fibo5 (n - 1) + fibo5 (n - 2)


-- Signatura
cmmdc :: Integer -> Integer -> Integer -- nr nat, nu ambele 0
-- Liquid Haskell ~~~> refinement types (Nat = Integer a.i. >= 0)
cmmdc x 0 = x
cmmdc 0 y = y
cmmdc x y = if x > y then
              cmmdc (x - y) y
            else
              cmmdc x (y - x)

-- Modul principal de a face calcule in Haskell: functiile


-- 2. Functii cu acumulator

sumn :: Integer -> Integer
sumn 0 = 0
sumn n = n + sumn (n - 1)
--           ^^^^^^^^^^^^
--           nu e in pozitie de coada

-- sum 3 =                          -- cu "^^^^^^^^^^^^^^^^" marchez stiva
-- 3 + sum 2 =
-- ^^^^
-- 3 + (2 + sum 1) =
-- ^^^^^^^^^
-- 3 + (2 + (1 + sum 0)) =
-- ^^^^^^^^^^^^^^
-- 3 + (2 + (1 + 0)) =
-- ^^^^^^^^^^^^^^
-- 3 + (2 + 1) =
-- ^^^^^^^^^
-- 3 + 3 =
-- ^^^^
-- 6.

-- for (i = 1; i <= n; ++i)
--    r += i;
-- return r;

sumna :: Integer -> Integer -> Integer
sumna 0 a = a
sumna n a = sumna (n - 1) (n + a) -- ~~~> pot fi transformate automat de compilator intr-o bucla
--          ^^^^^^^^^^^^^^^^^^^^^
--          in pozitie de coada (tail-call)

-- sumna 3 0 =
-- sumna 2 3 =
-- sumna 1 5 =
-- sumna 0 6 =
-- 6.


-- 3. Avantaj transparenta referentiale + rationament ecuational.

-- Sigur "sumna" calculeaza acelasi lucru cu "sumn"?

-- Folosesc rationamentul ecuational pentru a arata ca

-- pentru orice n: sumna n a = a + sumn n

-- prin inductie dupa "n".

-- CAZUL DE BAZA. pentru n = 0: trivial (sumna 0 a = a; sumn 0 = 0)
-- CAZUL INDUCTIV. pentru n > 0:

-- sumna n a =
--             (Ecuatia 2)
-- sumna (n - 1) (n + a) =
--             (Ipoteza inductie)
-- (n + a) + sumn (n - 1) =
--             (Com. +)
-- (a + n) + sumn (n - 1) =
--             (Asoc. +)
-- a + (n + sumn (n - 1)) =
--             (Ecuatia 2 din definitia lui sumn)
-- a + sumn n.


-- 4. Tipul de date PERECHE

myfst :: (Integer, Integer) -> Integer
--       ^^^^^^^^^^^^^^^^^^
--       tipul perechile in care ambele componente sunt de tip Integer
myfst (x, y) = x

mysnd :: (Integer, Integer) -> Integer
mysnd (_, y) = y

mysum :: (Int, Int) -> Int
mysum x = fst x + snd x

mysum' :: (Int, Int) -> Int
mysum' (x, y) = x + y

-- Toate functiile de mai sus primesc UN SINGUR ARGUMENT (pereche)

-- 5. Liste

sumlista :: [Integer] -> Integer
sumlista [] = 0
sumlista (hd:tl) = hd + sumlista tl
--                      ^^^^^^^^^^^

-- sumlista [1,2,3] =
--                      (Ecuatia 2)
-- 1 + sumlista [2,3] =
--                      (Ecuatia 2)
-- 1 + (2 + sumlista [3]) =
--                      (Ecuatia 2)
-- 1 + (2 + (3 + sumlista [])) =
--                      (Ecuatia 1)
-- 1 + (2 + (3 + 0)) =
-- ...
-- 6.

sumlista' :: [Integer] -> Integer
sumlista' [] = 0
sumlista' (x:xs) = x + sumlista' xs

-- Exercitiu: sumlista este tail-recursive?
-- mylength = intoarce lungimea unei liste

-- Ce se intampla daca ...?

myhead :: [Integer] -> Integer
--myhead [] = 
myhead (hd:_) = hd

-- myhead este o functie partiala

wishful :: Integer -> Integer
wishful n = wishful n

-- evaluarea unei expresii:
-- 1. sa se opreasca cu un rezultat;
-- 2. sa nu se opreasca;
-- 3. sa apara o exceptie pe parcursul evaluarii.
